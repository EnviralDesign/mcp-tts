name: Test and Lint

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
        
      - name: Install system audio dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev libasound2-dev
        
      - name: Install dependencies
        run: uv sync --all-extras
        
      - name: Run linting with ruff
        run: uv run ruff check .
        
      - name: Run formatting check with black
        run: uv run black --check .
        
      - name: Run import tests
        run: |
          uv run python -c "
          import sys
          import os
          sys.path.insert(0, 'src')
          
          # Set environment variable to indicate CI mode
          os.environ['CI_MODE'] = 'true'
          
          # Test core imports
          print('Testing imports...')
          from config import Config, VOICE_PRESETS
          from mcp_server import main
          print('‚úÖ Core imports successful')
          
          # Test configuration loading
          print('Testing configuration...')
          config = Config.load()
          print(f'‚úÖ Configuration loaded: {config.tts.voice}')
          
          # Test voice presets
          print('Testing voice presets...')
          assert len(VOICE_PRESETS) == 9
          assert 'professional' in VOICE_PRESETS
          assert 'nyc_cabbie' in VOICE_PRESETS
          print('‚úÖ Voice presets loaded correctly')
          
          # Test TTS manager creation (with CI-safe mode)
          print('Testing TTS manager...')
          from tts.manager import TTSManager
          tts_manager = TTSManager(config)
          print('‚úÖ TTS Manager created successfully')
          
          print('üéâ All basic tests passed!')
          "
          
      - name: Run pytest if test files exist
        run: |
          if ls tests/test_*.py >/dev/null 2>&1; then
            echo "Running pytest..."
            uv run pytest tests/ -v --tb=short
          else
            echo "No pytest files found, skipping pytest"
          fi
          
      - name: Test package build
        run: |
          echo "Testing package build..."
          uv build
          echo "‚úÖ Package built successfully"
          ls -la dist/
          
      - name: Test package installation
        run: |
          echo "Testing package installation..."
          cd dist
          uv pip install --force-reinstall mcp_tts-*.whl
          echo "‚úÖ Package installed successfully"
          
      - name: Verify installed package
        run: |
          echo "Verifying installed package..."
          python -c "
          import mcp_tts
          print('‚úÖ Package import successful')
          "
          
          # Test that entry points work
          echo "Testing entry points..."
          python -c "
          import sys
          import subprocess
          
          # Test that the entry points are registered
          result = subprocess.run([sys.executable, '-m', 'pip', 'show', 'mcp-tts'], 
                                capture_output=True, text=True)
          if 'mcp-tts-server' in result.stdout:
              print('‚úÖ Entry points registered correctly')
          else:
              print('‚ùå Entry points not found')
              print(result.stdout)
              sys.exit(1)
          "

  lint-summary:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
      - name: Test Summary
        run: |
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "üéâ All tests passed!"
            echo "‚úÖ Code formatting: OK"
            echo "‚úÖ Linting: OK" 
            echo "‚úÖ Imports: OK"
            echo "‚úÖ Package build: OK"
            echo "‚úÖ Installation: OK"
          else
            echo "‚ùå Some tests failed"
            echo "Check the test results above for details"
            exit 1
          fi 